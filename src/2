#include "health_engine.h"

HealthEngine::HealthEngine() {}

HealthEngine::~HealthEngine() {}

void HealthEngine::Run(GameObject &object,
                       std::vector<GameObject> &objects_list) {
  if (object.health) {
    for (auto &hit_object : object.objects_hit) {
      if (object.is_active) {
        CheckInvincibility(object);
        // Checks that player is alive and not invincible on monster collision.
        if (hit_object->type == ObjectType::kEnemy &&
            object.type == ObjectType::kPlayer &&
            !object.hit_box->is_invincible) {
          object.health->health = object.health->health - 1;
          if (object.health->health == 0) { // add && object == enemy
            object.is_active = false;
            if (object.type == ObjectType::kEnemy) {
              int drop_chance = rand() % 100;
              switch (drop_chance) {
              case 0 - 99: // 33 - 65: // One Coin
              {
                GameObject GreenRupee;
                GreenRupee.type = ObjectType::kGreenRupee;
                GreenRupee.is_active = true;
                GreenRupee.sprite = SpriteComponent(
                    "item_sprite", {.x = 5, .y = 87, .w = 8, .h = 14}, 3);
                GreenRupee.location = object.location;
                GreenRupee.hit_box = HitBoxComponent();
                objects_list.push_back(GreenRupee);
                break;
              }
              case 66 - 85: // Five Coins
              {
                GameObject BlueRupee;
                BlueRupee.type = ObjectType::kBlueRupee;
                BlueRupee.is_active = true;
                BlueRupee.sprite = SpriteComponent(
                    "item_sprite", {.x = 42, .y = 87, .w = 8, .h = 14}, 3);
                BlueRupee.location = object.location;
                BlueRupee.hit_box = HitBoxComponent();
                break;
              }
              case 86 - 99: // Heart
              {
                GameObject heart;
                heart.type = ObjectType::kHeart;
                heart.is_active = true;
                heart.sprite = SpriteComponent(
                    "item_sprite", {.x = 124, .y = 88, .w = 14, .h = 13}, 3);
                heart.location = object.location;
                heart.hit_box = HitBoxComponent();
                break;
              }
              default:
                break;
              } // switch
            } else {
              object.hit_box->is_invincible = true;
              object.hit_box->time_since_last_hit_ms = SDL_GetTicks();
            }
          }
        }
      }
    }
  }
}

void HealthEngine::CheckInvincibility(GameObject &object) {
  int current_time_ms = SDL_GetTicks();
  int elapsed_time_ms =
      current_time_ms - object.hit_box->time_since_last_hit_ms;
  if (elapsed_time_ms >= 2000) {
    object.hit_box->is_invincible = false;
  }
}
